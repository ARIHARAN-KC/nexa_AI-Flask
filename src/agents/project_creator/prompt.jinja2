Create a project named {{ project_name }} with the following files:
{% for file in full_code %}
- {{ file.file }}:
  ```{{ file.file.split('.')[-1] }}
  {{ file.code }}
{% endfor %}

Instructions:

Validate and finalize the project structure.

Ensure all file paths use forward slashes (/) for directories (e.g., 'server/models/User.js', not 'servermodelsUser.js' or 'server\models\User.js').

Maintain the provided directory structure (e.g., 'server/models/', 'client/src/components/').

Avoid flattened or concatenated paths.

Return the actual file contents, not code to create files.

Clean and normalize all file paths (remove backticks, quotes, etc.)

Ensure all file contents are properly formatted and complete.

Your response MUST be in the following JSON format:
{
"reply": "Description of the project structure and any changes made",
"code": [
{
"file": "path/to/file.js",
"code": "actual file content here"
},
{
"file": "path/to/another/file.html",
"code": "actual file content here"
}
]
}

Rules:

Return the actual file contents in the "code" array, NOT Python code

Use forward slashes (/) for directory separation in ALL file paths

Include ALL files from the input with their actual content

Clean file paths by removing any backticks, quotes, or invalid characters

The "reply" should describe what was created and include the directory tree structure

Never include phrases like "as per your request" or address the user directly

Ensure the project structure is valid and well-organized

Do NOT generate Python code to create files - return the actual file contents

Maintain the original file content but ensure paths are properly structured

If you need to modify file paths, do so while preserving the directory hierarchy

Example of CORRECT response:

json
{
    "reply": "Created project structure for {{ project_name }} with the following files:\n\n{{ project_name }}/\n├── templates/\n│   └── login.html\n├── static/\n│   └── css/style.css\n└── app.py\n\nAll files were created with proper directory structure.",
    "code": [
        {
            "file": "templates/login.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <h1>Login Page</h1>\n</body>\n</html>"
        },
        {
            "file": "static/css/style.css", 
            "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}"
        },
        {
            "file": "app.py",
            "code": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return render_template('login.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        }
    ]
}
Example of INCORRECT response (contains Python code instead of file contents):

json
{
    "code": "import os\n\ndef create_project_structure(project_name, files):\n    try:\n        os.makedirs(project_name, exist_ok=True)\n        for file in files:\n            path = os.path.join(project_name, file['file'])\n            os.makedirs(os.path.dirname(path), exist_ok=True)\n            with open(path, 'w') as f:\n                f.write(file['code'])\n        return True\n    except Exception as e:\n        print(f\"Error creating project: {e}\")\n        return False\n\ncreate_project_structure('{{ project_name }}', files)",
    "reply": "Created project structure..."
}
Important: Your response must contain ACTUAL FILE CONTENTS, not code to create files. The "code" field should contain the real content of each file that would be written to disk.

Now create the project structure for: {{ project_name }}
